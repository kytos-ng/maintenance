<template>
    <div v-if="render_value > 0">
        <div class="maintenance_container">
            <div class="maintenance-table no-compact">
                <div class="maintenance-table-divisor">
                    <table id="maintenance-table-list-windows">
                        <thead>
                            <tr>
                                <template v-for="(header, index) in table_headers">
                                    <th scope="col" class="header" @click="sort(index)">
                                        {{ header }}
                                        <span class="order-dir" v-if="current_sort === index">
                                            {{ spanDir(index) }}
                                        </span>
                                    </th>
                                </template>
                            </tr>
                            <tr class="header-filter">
                                <template v-for="header in table_headers_id">
                                    <th scope="col">
                                        <input :id="header + '_search'" @keyup="filterWindowList"></input>
                                    </th>
                                </template>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="row in rowsOfPage">
                                <template v-for="column in row">
                                    <td>{{column}}</td>
                                </template>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div v-else>
        <div class="maintenance_container">
            <p class='empty-window-list' v-if='loading'>Loading maintenace windows. Please wait...</p>
            <p class='empty-window-list' v-else>No maintenance windows available.<p>
        </div>
    </div>
</template>

<script>
 module.exports = {
   data () {
     return {
       table_headers: ['id', 'start', 'end', 'description', 'items', 'status'],
       table_headers_id: ['maintenance_id', 'maintenance_start', 'maintenance_end', 'maintenance_description', 'maintenance_items', 'maintenance_status'],
       current_sort: 1,
       current_sort_dir: [],
       table_rows: [],
       render_value: 0,
       loading: false
     }
   },
   methods: {
     /*
         Set the sort direction for the given column index.
     */
     sort: function(new_sort) {
        // If the new sorted property (id, start, end, etc.) is the same as the current
        if(new_sort == this.current_sort) {
            // Switch the sorting order.
            let sort_dir = (this.current_sort_dir[new_sort] === 'asc') ? 'desc' : 'asc'
            this.$set(this.current_sort_dir, new_sort, sort_dir)
        }
        this.current_sort = new_sort
     },
     /*
         Return a marker symbol of the current sorting direction for the given column index.
     */
     spanDir: function(index) {
        if(this.current_sort_dir[index] === 'desc') {
            return '▾'
        }
        return '▴'
     },
     /*
         Filter the maintenance windows. Triggered by keyup event.
     */
     filterWindowList: function(event) {
        this.clearTableFilter()

        // For every property header to filter
        for(let i = 0; i < this.table_headers_id.length; i++) {
            // Get the id of the input field to filter with.
            let search_id = this.table_headers_id[i] + "_search"

            // Get the component of the correspoding id if it exists.
            let component = document.getElementById(search_id)
            if(!component)
                continue
            
            // Get the text to filter with if it exists.
            let filter = component.value.toUpperCase()
            if(!filter)
                continue
            
            let table, tr, td, value
            let index = i

            table = document.getElementById("maintenance-table-list-windows")
            // Hide the table to prepare for rendering.
            table.style.display = "none"
            body = table.getElementsByTagName("tbody")
            tr = body[0].getElementsByTagName("tr")

            // For every row in the table
            for(let j = 0; j < tr.length; j++) {
                // Get the column correspoding to the property header to filter on.
                td = tr[j].getElementsByTagName("td")[index]

                // If the column doesn't match the filter, hide the row.
                if(td) {
                    value = td.textContent || td.innerText
                    if(value.toUpperCase().indexOf(filter) < 0) {
                        tr[j].style.display = "none"
                    }
                }
            }
            // Display the table.
            table.style.display = ""
        }
     },
     /*
         Clear the filters applied on the table.
     */
     clearTableFilter: function() {
        let table = document.getElementById("maintenance-table-list-windows")
        let body = table.getElementsByTagName("tbody")[0]
        let tr = body.getElementsByTagName("tr")
        // For every row in the table, display it.
        for(let i = 0; i < tr.length; i++) {
            tr[i].style.display = ""
        }
     },
     /*
         Gets the maintenance windows data by using the /kytos/maintenance endpoint.
     */
     listMaintenanceWindows: function() {
        var _this = this
        var data_rows = []
        this.render_value = 0
        this.loading = true

        var request = $.ajax({
            url: this.$kytos_server_api + "kytos/maintenance",
            type: "GET",
            dataType: "json",
            contentType: "application/json"
        })
        request.done(function(data) {
          $.each(data, function(i, window) {
              if(window) {
                  // Convert numberic status (0,1,2) to their correspoding words. 
                  // If an status is not 0,1,2 then it will display it as a number (default).
                  let status = window.status
                  if(window.status == '0') {
                      status = 'Pending'
                  } else if(window.status == '1') {
                      status = 'Running'
                  } else if(window.status == '2') {
                      status = 'Finished'
                  }

                  let row = {
                      "id": window.id,
                      "start": window.start,
                      "end": window.end,
                      "description": window.description,
                      "items": window.items.join(", "),
                      "status": status
                  }
                  data_rows.push(row)
              }
          })
          _this.table_rows = data_rows
          _this.loading = false
          // If there is maintenance windows to display, do so.
          if(_this.table_rows.length > 0) {
              _this.forceRender()
          }
        })
        request.fail(function(jqXHR, status) {
            alert("Request failed: " + status + ".")
            _this.loading = false
        })
        return data_rows
     },
     /*
         Activates the re-rendering of the table.
     */
     forceRender: function() {
         this.render_value += 1
     },
   },
   computed: {
     /*
         Orders a column in asceding or descending order.
     */
     rowsOfPage: function() {
         return this.table_rows.sort((a,b) => {
             // Return negative value, a goes before b.
             // Return positive value, b goes before a.
             // Return 0, no change.
             
             let modifier = 1
             let key_a = Object.keys(a)
             let key_b = Object.keys(b)

             if(this.current_sort_dir[this.current_sort] === 'desc') {
                 modifier = -1
             }
             if(a[key_a[this.current_sort]] < b[key_b[this.current_sort]]) {
                 return -1 * modifier
             }
             if(a[key_a[this.current_sort]] > b[key_b[this.current_sort]]) {
                 return modifier
             }
             return 0
         })
     }
   },
   mounted() {
       // List the maintenance windows.
       this.listMaintenanceWindows()
       // Initialize list sort direction
       this.current_sort_dir = Array(this.table_headers.length).fill('asc');
       $('.k-info-panel:has(.maintenance_container)').addClass('maintenance-k-info-panel');
   },
   destroyed() {
       $('.k-info-panel').removeClass('maintenance-k-info-panel');
   }
 }
</script>

<style type="text/css">
    .maintenance-k-info-panel {
        width: calc(100% - 300px);
    }

    .empty-window-list {
        margin-top: 0.2 rem;
        color: #ccc;
        font-size: 1rem;
    }

    .maintenance-table {
        color: #ccc;
        max-height: 250px;
        text-align: center;
        margin: 0 auto;
        display: block;
        padding: 0.5em 0 1em 0.3em;
        font-size: 1em;
        height: 190px;
    }
    .maintenance-table table {
        display: table;
        width: 100%;
    }
    .maintenance-table thead {
        font-weight: bold;
        background: #554077;
    }
    .maintenance-table th {
        padding: 0.6em 0 0.6em  0;
    }
    .maintenance-table tr {
        color: lightgray;
    }
    .maintenance-table td {
        vertical-align: middle;
        padding-bottom: 0.5em;
    }
    .maintenance-table .header {
        cursor: pointer;
    }
    .maintenance-table .header-filter th {
        padding: 0 0 0.5em 0;
        background: #554077;
    }
    .maintenance-table .header-filter input {
        background: lightgray;
        border: 1px solid gray;
        border-radius: 3px;
        font-size: 1em;
        margin: 0 0.2em 0 0.2em;
        width: 100%;
    }
    .maintenance-table #maintenance_status_search {
        width: 90%;
    }
    .maintenance-table tbody tr:nth-child(even) {
        background: #313131;
    }
    .maintenance-table tbody tr:hover {
        color: #eee;
        background-color: #666;
    }
    .maintenance-table tbody tr.inactive {
        background-color: #600000;
    }
    .maintenance-table-divisor {
        height: 190px;
    }

    .order-dir {
        display: inline-block;
        width: 12px;
    }
</style>
