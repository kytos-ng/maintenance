<template>
    <div class="maintenance-window-container">
        <div class="window-buttons">
            <div class="window-buttons-left">
                <div class="window-back-button">
                    <k-button tooltip="List Maintenance Windows" title="< Back to list" @click="showInfoPanel"></k-button>
                </div>
            </div>
            <div class="window-buttons-right">
                <div class="window-save-button">
                    <k-button tooltip="Save Maintenace Window" title="Save Window" @click="saveWindow"></k-button>
                </div>
                <div class="window-delete-button">
                    <k-button tooltip="Delete Maintenace Window" title="Delete Window" @click="showDeleteWindow"></k-button>
                </div>
            </div>
        </div>
        <div class="maintenance-window-table no-compact">
            <div class="maintenance-window-table">
                <table id="window-table">
                    <tr v-for="(data, property) in window_data">
                        <template v-if="data != 'k-select'">
                            <th>{{property}}</th>
                            <td>
                                <input v-if="property_editable[property]" v-model="window_data[property]" class="window-editable">
                                </input>
                                <p v-else>{{ data }}</p>
                            </td>
                        </template>
                        <template v-else-if="property == 'Links'" class="window-table-items">
                                <th>Items</th>
                                <td>
                                    <table>
                                        <tr>
                                            <th style="text-align: center">Selected</th>
                                            <th style="text-align: center">Available</th>
                                        </tr>
                                        <tr>
                                            <td>
                                                <div :class="'editable-' + property_editable['Links']">
                                                    <k-select icon="link" title="Links" :options="sele_link_options" v-model:value="sele_chosen_links"></k-select>
                                                </div>
                                                <div :class="'editable-' + property_editable['Switches']">
                                                    <k-select icon="link" title="Switches" :options="sele_switch_options" v-model:value="sele_chosen_switches"></k-select>
                                                </div>
                                                <div :class="'editable-' + property_editable['Interfaces']">
                                                    <k-select  icon="link" title="Interfaces" :options="sele_interface_options" v-model:value="sele_chosen_interfaces"></k-select>
                                                </div>
                                                <k-button title="Remove Components"></k-button>
                                            </td>
                                            <td>
                                                <div :class="'editable-' + property_editable['Links']">
                                                    <k-select icon="link" title="Links" :options="aval_link_options" v-model:value="aval_chosen_links"></k-select>
                                                </div>
                                                <div :class="'editable-' + property_editable['Switches']">
                                                    <k-select icon="link" title="Switches" :options="aval_switch_options" v-model:value="aval_chosen_switches"></k-select>
                                                </div>
                                                <div :class="'editable-' + property_editable['Interfaces']">
                                                    <k-select  icon="link" title="Interfaces" :options="aval_interface_options" v-model:value="aval_chosen_interfaces"></k-select>
                                                </div>
                                                <k-button title="Add Components" @click="finishMaintenanceWindow"></k-button>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                        </template>
                    </tr>
                </table>
                <k-modal
                    message="Delete Maintenace Window?"
                    button-title="Delete"
                    :action="deleteMaintenanceWindow"
                    v-model:show-modal="delete_window">
                </k-modal>
            </div>
        </div>
        <div class="window-buttons">
            <div class="window-buttons-bottom">
                <div class="window-finish-button">
                    <k-button tooltip="Finish Maintenance Window" title="Finish Window" @click="finishMaintenanceWindow"></k-button> 
                </div>
                <div class = "window-extend-button">
                    <k-button title="Extend Window" @click="extendWindow"></k-button>
                    <k-button title="CLICK ON ME" @click="clickME"></k-button>
                </div>
                <div class = "minute-input-field">
                    <k-input placeholder = "Enter minutes (click extend)" v-model:value ="minutes"></k-input>  
                </div>
            </div>
        </div>
    </div>
</template>
<script>
    module.exports = {
        props: {
            content : {
                type: Object,
                required: true
            }
        },
        data() {
            return {
                window_data: [],
                links_options: [],
                switches_options: [],
                interfaces_options: [],
                chosen_links: [],
                chosen_switches: [],
                chosen_interfaces: [],
                auto_items: [],
                property_editable: [],
                delete_window: false,
                display: true,
                minutes: "",
                mw_links_set: new Set(),
                mw_switches_set: new Set(),
                mw_interfaces_set: new Set(),
                topo_links: [], 
                topo_switches: [],
                topo_interfaces: [],
                sele_link_options: [],
                sele_switch_options: [],
                sele_interface_options: [],
                sele_chosen_links: [],
                sele_chosen_switches: [],
                sele_chosen_interfaces: [],
                aval_link_options: [],
                aval_switch_options: [],
                aval_interface_options: [],
                aval_chosen_links: [],
                aval_chosen_switches: [],
                aval_chosen_interfaces: [],
            }
        },
        methods: {
            /*
                Shows the panel that lists the maintenance windows.
            */
            showInfoPanel: function() {
                let listWindows = {
                    "component": 'kytos-maintenance-k-info-panel-list_maintenance',
                    "content": {},
                    "icon": "desktop",
                    "title": "View Windows",
                    "subtitle": "by kytos/Maintenance"
                }
                this.$kytos.eventBus.$emit("showInfoPanel", listWindows)
            },
            /*
                Saves the maintenance window.
            */
            saveWindow: function() {
                var _this = this

                var filteredLinks = []
                var filteredSwitches = []
                var filteredInterfaces = []
                
                // For every chosen link
                for(let item of this.chosen_links) {
                    // If the link is not a string
                    if(typeof(item) != "string") {
                        // Skip it.
                        continue
                    }
                    // Otherwise, add the link id to the list of links.
                    filteredLinks.push(item)
                }
                // For every chosen switch
                for(let item of this.chosen_switches) {
                    // If the switch is not a string
                    if(typeof(item) != "string") {
                        // Skip it.
                        continue
                    }
                    // Otherwise, add the switch id to the list of items.
                    filteredSwitches.push(item)
                }
                // For every chosen interface
                for(let item of this.chosen_interfaces) {
                    // If the interface is not a string
                    if(typeof(item) != "string") {
                        // Skip it.
                        continue
                    }
                    // Otherwise, add the interface id to the list of links.
                    filteredInterfaces.push(item)
                }
                console.log("BEING SENT -> ", {
                        "id": _this.window_data.Id,
                        "start": _this.window_data.Start,
                        "end": _this.window_data.End,
                        "description": _this.window_data.Description,
                        "links": filteredLinks,
                        "switches": filteredSwitches,
                        "interfaces": filteredInterfaces,
                    })
                // Update the maitenance window with the new values.
                //var request = $.ajax({
                //    url: this.$kytos_server_api + "kytos/maintenance/v1/" + _this.window_data.Id,
                //    type: "PATCH",
                //    data: JSON.stringify({
                //        "id": _this.window_data.Id,
                //        "start": _this.window_data.Start,
                //        "end": _this.window_data.End,
                //        "description": _this.window_data.Description,
                //        "links": filteredLinks,
                //        "switches": filteredSwitches,
                //        "interfaces": filteredInterfaces,
                //    }),
                //    dataType: "json",
                //    contentType: "application/json"
                //})
                //request.done( function(data) {
                //    let notification = {
                //        title: 'Window "' + _this.window_data.Id + '" updated.',
                //        description: ''
                //    }
                //    // Notify on success.
                //    _this.$kytos.eventBus.$emit("setNotification", notification)
                //    // Refresh the window.
                //    _this.resetItemSelection()
                //    _this.loadMaintenanceWindow(_this.window_data.Id)
                //})
                //request.fail(function(jqXHR, status, error ) {
                //    let error_message = JSON.parse(jqXHR.responseText)
                //    if (error_message.hasOwnProperty('response')) {
                //        error_message = error_message.response
                //    } else if (error_message.hasOwnProperty('description')) {
                //        error_message = error_message.description
                //    }
                //
                //    let notification = {
                //        title: 'Updated Window failed.',
                //        description: 'Error updating window "' + _this.window_data.Id + '". ' + _this.capitalize(status) + ': ' +  error_message
                //    }
                //    // Notify on failure.
                //    _this.$kytos.eventBus.$emit("setNotification", notification)
                //})
            },
            /*
                Shows the modal delete window option.
            */
            showDeleteWindow: function() {
                this.delete_window = true
            },
            /*
                Loads the given maintenance window into a table.
            */
            loadMaintenanceWindow: function(id) {
                var _this = this

                // Request the window data from the API.
                return $.ajax({
                    url: this.$kytos_server_api + "kytos/maintenance/v1/" + id,
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json"
                }).done( function(data) {
                    // Build the maintenance window to be displayed.
                    _this.buildMaintenanceWindow(data)
                }).fail(function(jqXHR, status) {
                    let notification = {
                        title: "Error Loading Maintenace Window.",
                        description: 'Error loading window "' + _this.window_data.id + '". ' + _this.capitalize(status) + ': ' +  JSON.parse(jqXHR.responseText).response
                    }
                    // Notify on failure.
                    _this.$kytos.eventBus.$emit("setNotification", notification)
                })
            },
            /*
                Builds the maintenance window to be displayed.
            */
            buildMaintenanceWindow: function(window) {
                // Translate the window API status into its corresponding word.
                this.mw_links_set = new Set(window.links)
                this.mw_switches_set = new Set(window.switches)
                this.mw_interfaces_set = new Set(window.interfaces)
                let status = window.status

                // Build the columns to be displayed in the table.
                let column = {
                    "Id": window.id,
                    "Start": window.start,
                    "End": window.end,
                    "Description": window.description,
                    "Status": status,
                    "Links": "k-select",        // k-select
                    "Switches": "k-select",     // k-select
                    "Interfaces": "k-select",   // k-select
                }
                this.window_data = column
            },
            /*
                Delete a maintenance window.
            */
            deleteMaintenanceWindow: function() {
                var _this = this

                // Request a deletion of the given window from the API.
                var request = $.ajax({
                    url: this.$kytos_server_api + "kytos/maintenance/v1/" + _this.window_data.Id,
                    type:"DELETE"
                });
                request.done(function(data) {
                    // Go back to the listing of the maintenance windows.
                    _this.showInfoPanel();
                });
                request.fail(function( jqXHR, status ) {
                    let notification = {
                        title: 'Error deleting window "' + _this.window_data.Id + '"',
                        description: 'Error deleting window "' + _this.window_data.Id + '". ' + _this.capitalize(status) + ': ' +  JSON.parse(jqXHR.responseText).response
                    }
                    // Notify failure.
                    _this.$kytos.eventBus.$emit("setNotification" , notification);
                });
            },
            /*
                Load the links, switches, and interfaces of the topology API to 
                edit the maintenance window (items).
            */
            loadTopologyForEditing: function() {
                // If prop not available, stop loading...
                if(this.content == null) {
                    return
                }
                var _this = this
                var content_id = this.content.id
                // Asynchronously get the links, switches, and interfaces from the topology API.
                //Promise.all([this.loadLinksForEditing(), this.loadSwitchesForEditing(), this.loadInterfacesForEditing()])
                //.then(function() {
                //    // Once the three things are done, continue loading.
                //    _this.loadMaintenanceWindow(content_id)
                //})

                Promise.all([_this.loadMaintenanceWindow(content_id)])
                .then(function() {
                    _this.loadLinksForEditing()
                    _this.loadSwitchesForEditing()
                    _this.loadInterfacesForEditing()
                })
                this.setEditable()
            },
            /*
                Get the links from the topology API.
            */
            loadLinksForEditing: function() {
                var _this = this

                // Request the links from the API
                var request = $.ajax({
                    url: this.$kytos_server_api + "kytos/topology/v3/links",
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json"
                })
                request.done(function(data) {
                    let links = data.links
                    let linksKeys = Object.keys(links)
                    // For every link in topology
                    for(let i = 0; i < linksKeys.length; i++) {
                        let description = linksKeys[i]
                        try {
                            let linkMetadata = links[linksKeys[i]].metadata
                            // Check to avoid 'undefined' data.
                            if(linkMetadata.hasOwnProperty('link_name')) {
                                description = links[linksKeys[i]].metadata.link_name
                            }
                        } catch(error) {
                            // Description is id
                        }

                        // Populate options for selected and available links
                        let option = {"value": linksKeys[i], "description": description}
                        if (_this.mw_links_set.delete(linksKeys[i])) {
                            _this.sele_link_options.push(option)
                        }
                        else {
                            _this.aval_link_options.push(option)
                        }
                    }

                    // Links that are deleted in topology but still exists in the MW
                    _this.mw_links_set.forEach(link_id => {
                        _this.sele_link_options.push({"value": link_id, "description": link_id})
                    });
                    _this.mw_links_set.clear()
                })
                request.fail(function(jqXHR, status) {
                    let notification = {
                        title: 'Error getting links',
                        description: 'Error getting links for editing',
                    }
                    // Notify failure.
                    _this.$kytos.eventBus.$emit("setNotification" , notification);
                })
            },
            /*
                Get the switches from the topology API.
            */
            loadSwitchesForEditing: function() {
                var _this = this

                // Request switches from the topology API.
                var request = $.ajax({
                    url: this.$kytos_server_api + "kytos/topology/v3/switches",
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json"
                })
                request.done(function(data) {
                    let switches = data.switches
                    let switchesKeys = Object.keys(switches)

                    // For every switch in the topology API
                    for(let i = 0; i < switchesKeys.length; i++) {
                        let description = switchesKeys[i]
                        try {
                            let switchMetadata = switches[switchesKeys[i]].metadata
                            // Check to avoid 'undefined' data.
                            if(switchMetadata.hasOwnProperty('node_name')) {
                                description = switches[switchesKeys[i]].metadata.node_name
                            }
                        } catch(error) {
                            // Description is id
                        }

                        // Populate options for selected and available switches
                        let option = {"value": switchesKeys[i], "description": description}
                        if (_this.mw_switches_set.delete(switchesKeys[i])) {
                            _this.sele_switch_options.push(option)
                        }
                        else {
                            _this.aval_switch_options.push(option)
                        }
                    }
                
                    // Switches that are deleted in topology but still exists in the MW
                    _this.mw_switches_set.forEach(switch_id => {
                        _this.sele_switch_options.push({"value": switch_id, "description": switch_id})
                    });
                    _this.mw_switches_set.clear()
                })
                request.fail(function(jqXHR, status) {
                    let notification = {
                        title: 'Error getting switches',
                        description: 'Error getting switches for editing',
                    }
                    // Notify failure.
                    _this.$kytos.eventBus.$emit("setNotification" , notification);
                })
            },
            /*
                Get the interfaces from the topology API.
            */
            loadInterfacesForEditing: function() {
                var _this = this

                // Request the interfaces from the topology API.
                var request = $.ajax({
                    url: this.$kytos_server_api + "kytos/topology/v3/interfaces",
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json"
                })
                request.done(function(data) {
                    let interfaces = data.interfaces
                    let interfacesKeys = Object.keys(interfaces)

                    // For every interface in the topology API.
                    for(let i = 0; i < interfacesKeys.length; i++) {
                        let description = interfacesKeys[i]
                        try {
                            let interfaceMetadata = interfaces[interfacesKeys[i]].metadata
                            // Check to avoid 'undefined' data.
                            if(interfaceMetadata.hasOwnProperty('port_name')) {
                                description = interfaces[interfacesKeys[i]].metadata.port_name
                            }
                        } catch(error) {
                            // Description is id
                        }

                        // Populate options for selected and available interfaces
                        let option = {"value": interfacesKeys[i], "description": description}
                        if (_this.mw_interfaces_set.delete(interfacesKeys[i])) {
                            _this.sele_interface_options.push(option)
                        }
                        else {
                            _this.aval_interface_options.push(option)
                        }
                    }
                    // Interfaces that are deleted in topology but still exists in the MW
                    _this.mw_interfaces_set.forEach(interfaces_id => {
                        _this.sele_interface_options.push({"value": interfaces_id, "description": interfaces_id})
                    });
                    _this.mw_interfaces_set.clear()
                })
                request.fail(function(jqXHR, status) {
                    let notification = {
                        title: 'Error getting interfaces',
                        description: 'Error getting interfaces for editing',
                    }
                    // Notify failure
                    _this.$kytos.eventBus.$emit("setNotification" , notification);
                })
            },
            /*
                Determines what can be edited and what can not be edited
                in a maintenance window.
            */
            setEditable: function() {
                let editable = {
                    "Id": false,
                    "Start": true,
                    "End": true,
                    "Description": true,
                    "Status": false,
                    "Links": true,
                    "Switches": true,
                    "Interfaces": true,
                }
                this.property_editable = editable
            },
            /*
                Resets the auto-selected items.
            */
            resetItemSelection: function() {
                this.sele_chosen_links = []
                this.sele_chosen_switches = []
                this.sele_chosen_interfaces = []
                this.aval_chosen_links = []
                this.aval_chosen_switches = []
                this.aval_chosen_interfaces = []
            },
            /*
                Capitalizes the first letter of a given word.
            */
            capitalize: function(word) {
                return word.charAt(0).toUpperCase() + word.slice(1);
            },
            /*
                Finishes a maintenance window.
            */
            finishMaintenanceWindow: function() {
                var _this = this

                // Call the Maintenace API to finish the maintenance window.
                var request = $.ajax({
                    url: this.$kytos_server_api + "kytos/maintenance/v1/" + _this.window_data.Id + "/end",
                    type: "PATCH",
                    dataType: "json",
                    contentType: "application/json"
                })
                request.done(function(jqXHR, status) {
                    let notification = {
                        title: 'Window "' + _this.window_data.Id + '" finished.',
                        description: ''
                    }
                    // Notify on success.
                    _this.$kytos.eventBus.$emit("setNotification", notification)
                    // Refresh the window.
                    _this.resetItemSelection()
                    _this.loadMaintenanceWindow(_this.window_data.Id)
                })
                request.fail(function(jqXHR, status) {
                    let error_message = JSON.parse(jqXHR.responseText)
                    if (error_message.hasOwnProperty('response')) {
                        error_message = error_message.response
                    } else if (error_message.hasOwnProperty('description')) {
                        error_message = error_message.description
                    }

                    let notification = {
                        title: 'Finish Window failed.',
                        description: 'Error finishing window "' + _this.window_data.Id + '". ' + _this.capitalize(status) + ': ' +  error_message
                    }
                    // Notify on failure.
                    _this.$kytos.eventBus.$emit("setNotification", notification)
                })
            },
            /*
            Extends a maintenance window.
            */
            extendWindow: function() {
                var _this = this
                // Call the Maintenace API to extend the maintenance window.
                var request = $.ajax({
                    url: this.$kytos_server_api + "kytos/maintenance/v1/" + _this.window_data.Id + "/extend",
                    type: "PATCH",
                    dataType: "json",
                    contentType: "application/json",
                    data: JSON.stringify({"minutes": parseInt(_this.minutes),
                    }),
                })
                request.done(function(jqXHR, status) {
                    let notification = {
                        title: 'Window "' + _this.window_data.Id + '" has been extended .',
                        description: ''
                    }
                    // Notify on success.
                    _this.$kytos.eventBus.$emit("setNotification", notification)
                    // Refresh the window.
                    _this.resetItemSelection()
                    _this.loadMaintenanceWindow(_this.window_data.Id)
                })
                request.fail(function(jqXHR, status) {
                    let error_message = JSON.parse(jqXHR.responseText)
                    if (error_message.hasOwnProperty('response')) {
                        error_message = error_message.response
                    } else if (error_message.hasOwnProperty('description')) {
                        error_message = error_message.description
                    }
   
                    let notification = {
                        title: 'Extending Window failed.',
                        description: 'Error extending window "' + _this.window_data.Id + '". ' + _this.capitalize(status) + ': ' +  error_message
                    }
                    // Notify on failure.
                    _this.$kytos.eventBus.$emit("setNotification", notification)
                })           
            },
            /*
                Button: Move components inside select boxes under "Selected" section to "Available" section
            */
            removeComponentsBT: function() {

            },
            /*
                Button: Move components inside select boxes under "Available" section to "Selected" section
            */
            addComponentsBT: function() {

            },
            clickME: function() {
                console.log("LINKS -> ", this.sele_link_options)
                console.log("SWITCHES -> ", this.sele_switch_options)
                console.log("INTERFACES -> ", this.sele_interface_options)
            },
        },
        mounted() {
            // Loads the topology API first for editing the maintenance window.
            this.loadTopologyForEditing()
            $('.k-info-panel:has(.maintenance-window-container)').addClass('maintenance-window-k-info-panel');
        },
        unmounted() {
            $('.k-info-panel').removeClass('maintenance-window-k-info-panel');
        },
    }
</script>

<style type="text/css">
    .maintenance-window-k-info-panel {
        width: calc(100% - 300px) !important;
    }

    .maintenance-window-container .window-buttons {
        display: flow-root;
    }
    .window-buttons .window-buttons-left {
        float: left;
    }
    .window-buttons .window-buttons-right {
        float: right;
        display: flex;
    }
    .window-buttons .window-delete-button button {
        background: darkred;
    }
    .window-buttons .window-save-button button {
        background: #009500;
    }

    .window-buttons .window-buttons-bottom {
        margin-top: 1em;
    }
    
    .window-buttons .window-finish-button button {
        float: right;
        background: #372C5E;
    }
    .window-buttons .window-extend-button button {
        float: right;
        background: #372C5E;
    } 
    .minute-input-field {
        float: right;
        width: 200px;
        display: flex; 
    }

    .maintenance-window-container table {
        border-collapse: collapse;
        width: 100%;
        font-size: 0.9em;
        margin-top: 25px;
    }
    .maintenance-window-container button {
        cursor: Pointer;
    }
    .maintenance-window-table tr:nth-child(even) {
        background-color: #2d2d2d;
    }
    
    .maintenance-window-table td {
        border-left: 1px solid darkgray;
        padding: 5px;
        text-align: center;
        color: white;
        font-size: 0.9em;

    }
    .maintenance-window-table th {
        background-color: #372C5E;
        color: white;
        padding-top: 8px;
        padding-bottom: 8px;
        text-align: left;
        font-size: 0.9em;
    }

    .editable-false {
        pointer-events: none;
    }

    .window-editable {
        font-size: 0.9em;
        color: white;
        place-items: center;
        outline: none;
        border: 0;
        background-color: #515151;
    }
    .window-editable:focus {
        border: 2px solid blueviolet;
    }
    .window-editable:hover {
        background: #919191;
    }
</style>

